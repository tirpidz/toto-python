{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>This is a small <code>mono-repo</code> containing the <code>Toto Python</code> software. The goal is to provide a simple python example.</p>"},{"location":"#engineering","title":"Engineering","text":"<p>You are a working with the software here are some section of the documentation that might interest you. Those are a good way to start understanding what is happening in that repository.</p> Sections \ud83d\ude80 Quick Start Fastest way to get your hands dirty \ud83d\udd76\ufe0f Contributing Getting to know the contributing guidelines \ud83d\udcd6 Documentation All about this documentation"},{"location":"doc/contributing/","title":"Contributing","text":""},{"location":"doc/contributing/#overview","title":"Overview","text":"<p>There is many way to contribute, to a project, contributing is not just about creating new code lines. </p> <p>Warning</p> <p>Make sure to treat automation (scripts, documentation, examples, configurations, tests, etc...) with the same importance as you would good quality code.</p>"},{"location":"doc/contributing/#be-consistent","title":"Be consistent","text":"<p>We value tidy codebase meant to be read &amp; maintain by human being. Consistency is key, to <code>guarantee</code> consistency lets make sure we limit manual intervention and automate everything we can. In other words, let's be lazy.</p>"},{"location":"doc/contributing/#contribute-documentation","title":"Contribute Documentation","text":"<p>This very documentation is part of our codebase this is probably the first thing users &amp; other developers will see. Make sure it's accurate, precise up-to-date give documentation some love everyday. It could not be simpler, just edit some text <code>.md</code> file.</p> <p>To see how to build this documentation see Documentation.</p>"},{"location":"doc/contributing/#contribute-code","title":"Contribute Code","text":""},{"location":"doc/contributing/#git-usage","title":"Git usage","text":"<p>To keep git history clean and human readeable, we use as mush as possible <code>git rebase</code>.</p> <p>Please take a moment to really understand what is happening with the rebase concept and the differences with classical merge.</p> <p>Our main development branch is <code>main</code>, it is considered public, it is protected and will never be rebased ! The minimal setup you need to do is :</p> <pre><code>git config --global pull.rebase true\n</code></pre> <p>This will automatically rebase your changes in your branch when you pull (only happening if sharing a branch with a co-worker). After that, the minimal workflow is the following :</p> <pre><code># always start from the latest version of `dev` branch\ngit checkout dev\n# fast forward to the latest version of dev\ngit pull origin dev\n# create you branch (keep the name short and meaningful, not just issue number)\ngit checkout -b my-branch\ngit push origin my-branch\n# click on the merge request link and start documenting what you intend to do (it will be in WIP mode automatically, life is beautiful)\n...\n# hack\ngit commit ...\ngit push ...\n# hack\ngit commit ...\ngit push ...\n# repeat\n# when your work is ready or when you want to have your work \"merge\" with `dev`, do a little rebase\n# again make sure you have the last version\ngit checkout dev\ngit pull origin dev\ngit checkout my-branch\ngit rebase dev\n# it will reapply all you changes ontop of the lastest dev so you can test if everything is as you wish\n</code></pre> <p>Here is the minimal git 101 that everybody needs to understand before contributing: git-guide</p>"},{"location":"doc/doc/","title":"Documentation","text":"<p>Documentation is simple, see those <code>.md</code> text file in the repo? Those are our documentation!</p> <p>To build this documentation, we use :</p> <ul> <li>mkdocs.org to produces this documentation from plain markdown <code>md</code> files</li> </ul> <p>Everything is stored in <code>docs</code> folder.</p>"},{"location":"doc/doc/#generate-and-serve","title":"Generate and Serve","text":"<pre><code>mkdocs serve\n</code></pre>"},{"location":"doc/doc/#build-the-static-site","title":"Build the static site","text":"<pre><code>mkdocs build\n</code></pre>"},{"location":"doc/doc/#documentation-tricks","title":"Documentation tricks","text":""},{"location":"doc/doc/#tables","title":"Tables","text":"Field Type Required Description <code>f</code> <code>string</code> Something <p>Is generated from using:</p> <pre><code>| Field | Type     | Required | Description |\n| ---   | ---      | ---      | ---         |\n| `f`   | `string` |          | Something   |\n</code></pre>"},{"location":"doc/doc/#panel","title":"Panel","text":"<p>This quote panel is created with <code>&gt;</code></p> <pre><code>&gt; This **quote** panel is created with `&gt;`\n</code></pre> <p>Info</p> <p>This info panel is created with <code>!!! info</code></p> <pre><code>!!! info\n\n    This **info** panel is created with `!!! info`\n</code></pre> <p>Tip</p> <p>This tip panel is created with <code>!!! tip</code></p> <pre><code>\n!!! tip\n\n    This **tip** panel is created with `!!! tip`\n</code></pre> <p>Warning</p> <p>This warning panel is created with <code>!!! warning</code></p> <pre><code>\n!!! warning\n\n    This **warning** panel is created with `!!! warning`\n</code></pre> <p>Other types are available.</p>"},{"location":"doc/doc/#diagrams","title":"Diagrams","text":"<p>To do nice diagram, use this then use default soft colors, and then <code>sketch</code> line mode. Once done export then as <code>SVG</code> and add then to the <code>docs</code> folder. Make sure when we click on it from the documentation the zoom in works, and the diagram is perfectly readable.</p>"},{"location":"doc/doc/#link-to-a-header","title":"Link to a header","text":"<p>Somewhere in <code>page.md</code> there is a header like:</p> <pre><code>### My Header Title\n</code></pre> <p>To link to it (from any page even <code>page.md</code> itself):</p> <pre><code>[link display](docs/page?id=my-header-title)\n</code></pre>"},{"location":"doc/quick_start/","title":"Quick Start","text":""},{"location":"doc/quick_start/#prerequisites","title":"Prerequisites","text":"<p>The following sections will guide you into installing the project depedencies. The following instructions are for <code>ubuntu</code>.</p> <p>Make sure you have the latest updates &amp; required software:</p> <pre><code>sudo apt update\nsudo apt install git python3 python3-pip python3-venv\n</code></pre>"},{"location":"doc/quick_start/#git","title":"Git","text":"<p>Make sure that you setup git properly:</p> <pre><code>git config --global user.name \"John Doe\"\ngit config --global user.email john@gmail.com\ngit config --global pull.rebase true\n</code></pre>"},{"location":"doc/quick_start/#git-lfs","title":"Git LFS","text":"<ul> <li>Download Git LFS &amp; install <code>Git LFS</code>.</li> <li>Make sure to complete the integration with git:</li> </ul> <pre><code>git lfs install\n</code></pre>"},{"location":"doc/quick_start/#getting-the-code","title":"Getting the code","text":"<ul> <li>Clone the repository:</li> </ul> <pre><code>git clone git@github.com:tirpidz/toto-python.git\ncd toto-python\n</code></pre> <ul> <li>Create the virtual environment:</li> </ul> <pre><code>python3 -m venv venv\nsource venv/bin/activate\npip install -r requirements/development.txt\n</code></pre> <ul> <li>Activate the virtual environment:</li> </ul> <pre><code>source venv/bin/activate\n</code></pre>"},{"location":"doc/quick_start/#ide","title":"IDE","text":"<p>Currently our preference for <code>IDE</code> is with <code>vscode</code>.</p>"},{"location":"doc/quick_start/#vscode","title":"vscode","text":"<p>The default settings &amp; recommended extensions for the repository are under version control inside the <code>.vscode</code>.</p> <p>Warning</p> <p>ATM with the latest version of the plugins, I'm unable to run isort on save. One has to run it manually with: <code>isort ./clear_vision</code>.</p>"},{"location":"doc/quick_start/#format-checks","title":"Format &amp; Checks","text":"<p>If you want to manually format the codebase &amp; run the synthax checks, the <code>tools</code> folder at the root of the repository.</p> <p>To format simply run the following command:</p> <pre><code>(venv) \u279c  toto-python git:(feat/checks) ./tools/format.sh       \n\ud83d\udd28 Code Formating ...\nAll done! \u2728 \ud83c\udf70 \u2728\n2 files left unchanged.\n\ud83d\udcab Code Formating done.\n</code></pre> <p>To check for errors and warnings run the following command:</p> <pre><code>To format simply run the following command:\n```bash\n(venv) \u279c  toto-python git:(feat/checks) ./tools/check.sh \n\ud83d\udef8 Checking Code Formating ...\nAll done! \u2728 \ud83c\udf70 \u2728\n2 files would be left unchanged.\n\ud83d\udcab Checking Code Formating done.\n\ud83d\udef8 Code Analysis ...\n\ud83d\udcab Code Analysis done\n</code></pre>"}]}